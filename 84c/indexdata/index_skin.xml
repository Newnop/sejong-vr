<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.20.11">

  


    


  <style name="IconLH이동"
         url="%FIRSTXML%/spots/exit_round_hotspot_user_defaultpoint1.png"
         visible="false"
         edge="center"
         onloaded="showPermanentTooltip(all);"


         />




 

<include url="%FIRSTXML%/graphics/skinplus/core.xml" />
<action name="check_normal_hs">
  if(%1,
  for(set(hs_m,0), hs_m LT hotspot.count, inc(hs_m), if(hotspot[get(hs_m)].style == "IconHotspot_mark_1" || hotspot[get(hs_m)].style == "IconHotspot_mark_2" || hotspot[get(hs_m)].style == "IconHotspot_mark_3" || hotspot[get(hs_m)].style == "IconHotspot_mark_4" || hotspot[get(hs_m)].style == "IconHotspot_mark_5" || hotspot[get(hs_m)].style == "IconHotspot_mark_6" || hotspot[get(hs_m)].style == "IconHotspot_mark_7" || hotspot[get(hs_m)].style == "IconHotspot_mark_8" || hotspot[get(hs_m)].style == "IconHotspot_mark_8" || hotspot[get(hs_m)].style == "IconHotspot_mark_10", set(scenet_alt, get(hotspot[get(hs_m)].linktarget)); set(visit_alt, get(scene[get(scenet_alt)].seen));
      create_check_alt(get(hs_m));
      if(visit_alt,
      txtadd(nos_alt, checkicon_alt,get(hs_m) );
      set(layer[get(nos_alt)].visible,true);
      set(layer[get(nos_alt)].alpha,1);
        ););););
  </action>


<events name="langstart"
keep="true"
onxmlcomplete="if(lang !== null,
set(tour_language, get(lang));
events.dispatch(changetourlanguage);,
set(tour_language, get(tour_language)););"
/>


<action name="create_check">
addlayer(checkicon%1);
set(layer[checkicon%1].width,45);
set(layer[checkicon%1].height,prop);
set(layer[checkicon%1].type,image);
set(layer[checkicon%1].url, '%FIRSTXML%/graphics/skinplus/');
set(layer[checkicon%1].enable,true);
set(layer[checkicon%1].align,bottomright);
set(layer[checkicon%1].edge,bottomright);
set(layer[checkicon%1].visible,false);
set(layer[checkicon%1].children,true);
set(layer[checkicon%1].scalechildren,true);
set(layer[checkicon%1].alpha,0);
set(layer[checkicon%1].capture, false);
set(layer[checkicon%1].x, -10);
set(layer[checkicon%1].y, -10);
set(layer[checkicon%1].parent, hotspot[%1]);
</action>

<action name="create_check_alt">
addlayer(checkicon_alt%1);
set(layer[checkicon_alt%1].width,45);
set(layer[checkicon_alt%1].height,prop);
set(layer[checkicon_alt%1].type,image);
set(layer[checkicon_alt%1].url, '%FIRSTXML%/graphics/skinplus/');
set(layer[checkicon_alt%1].enable,true);
set(layer[checkicon_alt%1].align,bottomright);
set(layer[checkicon_alt%1].edge,bottomright);
set(layer[checkicon_alt%1].visible,false);
set(layer[checkicon_alt%1].children,true);
set(layer[checkicon_alt%1].scalechildren,true);
set(layer[checkicon_alt%1].alpha,0);
set(layer[checkicon_alt%1].capture, false);
set(layer[checkicon_alt%1].x, -10);
set(layer[checkicon_alt%1].y, -10);
set(layer[checkicon_alt%1].parent, hotspot[%1]);
</action>



<events name="SkinPlushotspot_mark" keep="true"
onxmlcomplete="check_normal_hs();"
onnewpano="check_normal_hs();"
/>














<krpano SkinPlusbarbuilt="false" SkinPlusbackgroundwidthwhenclosed="0" SkinPlusbackgroundwidthwhenopened="0" SkinPlusIsOpened="false" />

<k_setting
    speed="0.5"
    button_offset=""
    margin_flag_ico="100"
    flag_lang_1=""
    flag_lang_2=""
    flag_lang_3=""
    flag_lang_4=""
    flag_lang_5=""
    flag_lang_6=""
    flag_lang_7=""
    flag_lang_8=""
    flag_lang_9=""
    flag_lang_10=""
    context_menu_bool="false"
    plugname="SkinPlus"
    pluginDirectory="graphics/skinplus"
    contextlogofile=""
    context_url=""
    code="ptpkimage17"
    range_value="50"
    alpharange="false"
    full="true"
    scalemobile="0.6"
    scaletablet="0.8"
/>














<events name="SkinPlusevents"
    onxmlcomplete=""   
    keep="true"
/>

<events name="SkinPlusLanguage_event"
    onTourStart="SkinPluslangg();"
    changetourlanguage="SkinPluslangg();"
    keep="true"
/>






<action name="SkinPluslangg">
set(language_var, get(tour_language));


if(device.touch,
set(layer[SkinPlushelpScreenFg].url, '%FIRSTXML%/graphics/skinplus/help_screen_fg_mb.png');
,
set(layer[SkinPlushelpScreenFg].url, '%FIRSTXML%/graphics/skinplus/help_screen_fg.png');
);

</action>



<action name="buildMenuBar">
    ifnot (SkinPlusbarbuilt, SkinPlusbuildMenu(); set(SkinPlusbarbuilt, true););
</action>


  <style name="SkinPlus_btn_style"
         keep="true"


         edge="left"
         align="left"

         x="0" y="0"


         width="36" height="36"

         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"




         onhover="showTooltip('plugin', NULL, bottom);"
         onout="hideTooltip();"




         />

 <style name="SkinPlus_btn_style_icons"
         keep="true"


         edge="left"
         align="left"

         x="0" y="0"


         width="36" height="36"






         onhover="showTooltip('plugin', NULL, bottom);"
         onout="tween(alpha,1,0.5);hideTooltip();"




         />


 <style name="SkinPlus_btnf_style"
        keep="true"
        edge="left"
        align="left"
        x="0" y="0"
        width="36" height="prop"
        scale="0.8"
        onover=""

        onhover="showTooltip('plugin', NULL, bottom);"
        onout="hideTooltip();"
        />

  <style name="SkinPlus_style"
             keep="true"
             onhover="showTooltip('plugin', NULL);"
             onout="hideTooltip();"
/>

<style name="SkinPlus_style_lang"
     keep="true"
     onover="set(alpha, 0.8);  "
     onout="set(alpha, 1); hideTooltip();"
     onhover="showTooltip('plugin', NULL);"
/>

<style name="SkinPlus_btnf_style_float"
       keep="true"

       scale="0.8"
       onover=""



       onhover="showTooltip('plugin', 
       NULL
       , bottom);"
       onout="hideTooltip();"




             width="100"
             height="prop"

       />
 <style name="SkinPlus_style"
            keep="true"
            onhover="showTooltip('plugin', NULL);"
            onout="hideTooltip();"
/>



  <style name="SkinPlus_btn_style_off"
         keep="true"
         edge="left"
         align="left"

         x="0" y="0"
         width="36" height="36"
         onhover="showTooltip('plugin', NULL, bottom);"
         onout="hideTooltip();"
         />

<layer name="SkinPlus_footer"
         keep="true"
		 type="container"
         bgcolor="0x000000"
         bgalpha="0"
         x="0"
         y="0"
         enabled="false"
		 visible="false"
		 align="bottomleft"
		 edge="bottomleft"
		 zorder="2"
         height="60"
         width="100%"
          />








<events name="SkinPlus_footerevents"
    onTourStart=""
    keep="true" />


<action name="SkinPlushidefooter">
    tween(layer[SkinPlus_footer].y, -60, 0.2);
    delayedcall(0.4 ,set(layer[SkinPlus_footer].visible, false));
</action>

<action name="setTourLanguage">
  if (%1 == null,
    trace("CHANGE TOUR LANGUAGE : NO LANGUAGE SET");
   ,
    set(tour_language, %1);

    events.dispatch(changetourlanguage);
  );
</action>




<action name="SkinPlusshowfooter">

if (SkinPlusIsOpened,

	set(layer[SkinPlus_footer].visible, true);


    tween(layer[SkinPlus_footer].y, 0, 0.1);
    ,
    SkinPlushidefooter();

    );
</action>

<layer name="SkinPlus_menu_bg"
          keep="true"
          type="container"
          zorder="3"
          width="36"
          height="36"
          align="bottomleft"
          x="5" y="5"
          maskchildren="false"
          rotate="0"
          visible="false"
          scalechildren="true"




    >







<layer name="SkinPlusbtn_in"



url="%FIRSTXML%/graphics/skinplus/btn_zoom_in.png"
style="SkinPlus_btn_style"




            ondown="viewControlZoomIn(false); "
            onup="viewControlZoomStop();
"

            visible="false"
            devices="desktop|tablet|mobile"
            tooltip="SkinPluszoomInTip"
            />
<layer name="SkinPlusbtn_out"



            url="%FIRSTXML%/graphics/skinplus/btn_zoom_out.png"
            style="SkinPlus_btn_style"



            ondown="viewControlZoomOut(false);
  "
            onup="viewControlZoomStop();
"


            visible="false"
            devices="desktop|tablet|mobile"
            tooltip="SkinPluszoomOutTip"
            />
<layer name="SkinPlusbtn_sound_on"



           url="%FIRSTXML%/graphics/skinplus/btn_start_sound.png"
           style="SkinPlus_btn_style"



            onclick="playTourSounds();
"

            visible="false"
            devices="desktop|tablet|mobile"
            tooltip="SkinPlussoundsOnTip"
            />

<layer name="SkinPlusbtn_sound_off"


           url="%FIRSTXML%/graphics/skinplus/btn_stop_sound.png"
           style="SkinPlus_btn_style"




            onclick="stopTourSounds();
"

            visible="false"
            devices="desktop|tablet|mobile"
            tooltip="SkinPlussoundsOffTip"
            />

<layer name="SkinPlusbtn_prev_pano"



    url="%FIRSTXML%/graphics/skinplus/btn_previous_scene.png"
    style="SkinPlus_btn_style"




            onclick="loadPreviousScene();
"

            tooltip="SkinPlusprevSceneTip"
            visible="false"
            devices="desktop|tablet|mobile"

            />
<layer name="SkinPlusbtn_next_pano"




url="%FIRSTXML%/graphics/skinplus/btn_next_scene.png"
style="SkinPlus_btn_style"




            onclick=" loadNextScene();
"

            tooltip="SkinPlusnextSceneTip"
            visible="false"
            devices="desktop|tablet|mobile"
            />











<layer name="SkinPlusbtn_openfs"


url="%FIRSTXML%/graphics/skinplus/btn_enter_fs.png"
style="SkinPlus_btn_style"




            onclick="enterFullscreen();
 "


            visible="false"
            devices="fullscreensupport"
            tooltip="SkinPlusopenFsTip"
            />

<layer name="SkinPlusbtn_closefs"



url="%FIRSTXML%/graphics/skinplus/btn_close_fs.png"
style="SkinPlus_btn_style"



            onclick="exitFullscreen();
 "


            visible="false"
            devices="fullscreensupport"
            tooltip="SkinPluscloseFsTip"
            />

<layer name="SkinPlusbtn_autorotate_on"



url="%FIRSTXML%/graphics/skinplus/btn_start_autorotation.png"
style="SkinPlus_btn_style"




            onclick="resumeautorotation();
"

            visible="false"
            devices="desktop|tablet|mobile"
            tooltip="SkinPlusautorotateOnTip"
/>

<layer name="SkinPlusbtn_autorotate_off"


url="%FIRSTXML%/graphics/skinplus/btn_stop_autorotation.png"
style="SkinPlus_btn_style"


            onclick="pauseautorotation();
"

            visible="false"
            devices="desktop|tablet|mobile"

            tooltip="SkinPlusautorotateOffTip"
/>















 </layer>


<action name="SkinPlusbtn_home_action">
      hideTooltip();lookto(get(panoview.h),get(panoview.v),get(panoview.fov),smooth(100,20,50));
</action>





<action name="SkinPlushideMenuControls">

set(SkinPlusIsOpened, false);
if (scene.count GT 1,
set(layer[SkinPlusbtn_next_pano].visible, false);
set(layer[SkinPlusbtn_prev_pano].visible, false); ); 
set(layer[SkinPlusbtn_lang_off].visible, false);
set(layer[SkinPlusbtn_lang].visible, false);
set(layer[SkinPlusbtn_home].visible, false);
set(layer[SkinPlusbtn_in].visible, false);
set(layer[SkinPlusbtn_out].visible, false); 
SkinPlusupdateFullscreenButtons(); 
SkinPlusupdateAutorotationButtons(); 
SkinPlusupdateSoundButtons(); 
set(layer[SkinPlus_menu_bg].width, get(SkinPlusbackgroundwidthwhenclosed));
set(layer[SkinPlus_menu_bg].visible, true);
SkinPlushidefooter();
</action>

<action name="SkinPlusshowMenuControls">
set(SkinPlusIsOpened, true);
SkinPlusshowfooter();
set(layer[SkinPlus_menu_bg].visible, true);
if (scene.count GT 1,
set(layer[SkinPlusbtn_next_pano].visible, true);
set(layer[SkinPlusbtn_prev_pano].visible, true););

set(layer[SkinPlusbtn_share].visible, true);
set(layer[SkinPlusbtn_search].visible, true);
set(layer[SkinPlusbtn_shotp].visible, true);
set(layer[SkinPlusbtn_menu].visible, true);
set(layer[SkinPlusbtn_gallery].visible, true);
set(layer[SkinPlusbtn_pdf].visible, true);
set(layer[SkinPlusbtn_web].visible, true);
set(layer[SkinPlusbtn_lang_off].visible, false);
set(layer[SkinPlusbtn_lang].visible, true);

set(layer[SkinPlusbtn_in].visible, true);
set(layer[SkinPlusbtn_out].visible, true);
SkinPlusupdateFullscreenButtons();


SkinPlusupdateAutorotationButtons();


SkinPlusupdateSoundButtons();









set(layer[SkinPlus_menu_bg].width, get(SkinPlusbackgroundwidthwhenopened));


</action>





<events name="SkinPlusControlplan_pano"
keep="true"
onnewpano="set(little, 0);if (SkinPlusIsOpened,set(layer[SkinPlusbtn_little].visible, true);set(layer[SkinPlusbtn_little_off].visible, false););SkinPlusControlplan();"

/>

<action name="SkinPlusControlplan">
if (scene[get(xml.scene)].planar,
set(layer[SkinPlusbtn_little].alpha, 0.4);
set(layer[SkinPlusbtn_little].onclick, "");
set(layer[SkinPlusbtn_little].tooltip, "SkinPluslittle_disable_tip");
,
set(layer[SkinPlusbtn_little].alpha, 1.0);
set(layer[SkinPlusbtn_little].tooltip, "SkinPluslittle_tip");
set(layer[SkinPlusbtn_little].onclick, "SkinPlussetViewLittlePlanet();hideHotspots();
pauseautorotation();
");
);
</action>


<action name="SkinPlusHideLittle_btn">

	set(layer[SkinPlusbtn_little].visible, false);
    set(layer[SkinPlusbtn_little_off].visible, false);

</action>

<action name="SkinPlusShowlittle_btn">
if ( little != 1,
	set(layer[SkinPlusbtn_little].visible, true);
    set(layer[SkinPlusbtn_little_off].visible, false);

    ,

    set(layer[SkinPlusbtn_little].visible, false);
    set(layer[SkinPlusbtn_little_off].visible, true);
    );
</action>

<action name="SkinPlusupdateLittleButtons">

    if (SkinPlusIsOpened,

        SkinPlusShowlittle_btn();
    ,
        SkinPlusHideLittle_btn();
    );
</action>


<action name="SkinPlussetViewLittlePlanet">


	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		SkinPlussetViewLittlePlanetComplete();

        
	);
</action>

<action name="SkinPlussetViewLittlePlanetComplete">
set(little, 1);
SkinPlusupdateLittleButtons();
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.stereographic, true);
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, 0.25);
	tween(view.vlookat, 90, distance(179, 1.50));
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, 150, distance(179, 0.75));
</action>

<action name="SkinPlussetViewNormal">

	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	SkinPlussetViewNormalComplete();
</action>

<action name="SkinPlussetViewNormalComplete">
set(little, 0);
SkinPlusupdateLittleButtons();
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
	set(view.stereographic,false);
	);

</action>




<action name="SkinPlusshow_language_box">
set(layer[SkinPlusbtn_lang].visible, true);
set(layer[SkinPlusbtn_lang_off].visible, false);
</action>

<action name="SkinPlushide_language_box">
set(layer[SkinPlusbtn_lang_off].visible, true);
set(layer[SkinPlusbtn_lang].visible, false);
</action>



<events name="SkinPlusmenufullscreenchangeevent"
          onenterfullscreen="SkinPlusupdateFullscreenButtons();"
          onexitfullscreen="SkinPlusupdateFullscreenButtons();"
          keep="true"/>

<action name="SkinPlusHideFullscreenButtons">
		set(layer[SkinPlusbtn_openfs].visible , false);
		set(layer[SkinPlusbtn_closefs].visible, false);
</action>

<action name="SkinPlusShowFullscreenButtons">
		if (device.fullscreensupport,
        if (!device.ipad,
			if(tour_fullscreen,
				set(layer[SkinPlusbtn_openfs].visible , false);
				set(layer[SkinPlusbtn_closefs].visible, true);
			,
				set(layer[SkinPlusbtn_openfs].visible ,true);
				set(layer[SkinPlusbtn_closefs].visible,false);
			););
		,
			SkinPlusHideFullscreenButtons();
		);
</action>
<action name="SkinPlusupdateFullscreenButtons">
		if (SkinPlusIsOpened,
			SkinPlusShowFullscreenButtons();
		,
			SkinPlusHideFullscreenButtons();
		);
</action>

<events name="SkinPlusAutorotationEvents"
		onstartautorotation="SkinPlusupdateAutorotationButtons();"
		onresumeautorotation="SkinPlusupdateAutorotationButtons();"
		onstopautorotation="SkinPlusupdateAutorotationButtons();"
		onpauseautorotation="SkinPlusupdateAutorotationButtons();"
		keep="true"/>

<action name="SkinPlusHideAutorotationButtons">
		set(layer[SkinPlusbtn_autorotate_off].visible, false);
		set(layer[SkinPlusbtn_autorotate_on].visible , false);
</action>
<action name="SkinPlusShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[SkinPlusbtn_autorotate_off].visible, false);
			set(layer[SkinPlusbtn_autorotate_on].visible , true);
		,
			set(layer[SkinPlusbtn_autorotate_off].visible, true);
			set(layer[SkinPlusbtn_autorotate_on].visible , false);
		);
</action>
<action name="SkinPlusupdateAutorotationButtons">
		if (SkinPlusIsOpened,
			SkinPlusShowAutorotationButtons();
		,
			SkinPlusHideAutorotationButtons();
		);
</action>


<events name="SkinPlusplaystopsoundsevent" playtoursoundsevent="SkinPlusupdateSoundButtons();" stoptoursoundsevent="SkinPlusupdateSoundButtons();" keep="true"/>
<action name="SkinPlusHideSoundButtons">
		set(layer[SkinPlusbtn_sound_off].visible, false);
		set(layer[SkinPlusbtn_sound_on].visible , false);
</action>
<action name="SkinPlusShowSoundButtons">
		if (tour_soundson == false,
			set(layer[SkinPlusbtn_sound_off].visible, false);
			set(layer[SkinPlusbtn_sound_on].visible , true);
		,
			set(layer[SkinPlusbtn_sound_off].visible, true);
			set(layer[SkinPlusbtn_sound_on].visible , false);
		);
</action>
<action name="SkinPlusupdateSoundButtons">
		if (SkinPlusIsOpened,
			SkinPlusShowSoundButtons();
		,
			SkinPlusHideSoundButtons();
		);
</action>






 








<layer name="SkinPlusspotTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	roundedge="5"
     
	background="true"
	backgroundcolor="0xa63fd0"
	backgroundalpha="1"  
	border="false"  
	css="color:#ffffff;font-family:Helvetica;font-size:13px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	padding="10"
	selectable="false"
	zorder="0"
	visible="false"
	html=""

    edge="top"
	xoffset="0"
	yoffset="10"


/>
 




<action name="SkinPlusbuildMenu">
    
    set(SkinPlusbutton_pos, 0);
    set(nnn,0);







      if (device.fullscreensupport,
      if (!device.ipad,
      inc(nnn, 1);
        set(layer[SkinPlusbtn_openfs].x , get(SkinPlusbutton_pos));
        set(layer[SkinPlusbtn_closefs].x, get(SkinPlusbutton_pos));
        inc(SkinPlusbutton_pos, 41); ); );























if (device.desktop || device.tablet || device.mobile,
inc(nnn, 1);
      set(layer[SkinPlusbtn_autorotate_on].x , get(SkinPlusbutton_pos));
      set(layer[SkinPlusbtn_autorotate_off].x, get(SkinPlusbutton_pos));
      inc(SkinPlusbutton_pos, 41); ); 



inc(nnn, 1);
    if (device.desktop || device.tablet || device.mobile,
          set(layer[SkinPlusbtn_sound_on].x , get(SkinPlusbutton_pos));
          set(layer[SkinPlusbtn_sound_off].x, get(SkinPlusbutton_pos));
          inc(SkinPlusbutton_pos, 41););

















if (device.desktop || device.tablet || device.mobile,
inc(nnn, 2);
        set(layer[SkinPlusbtn_in].x, get(SkinPlusbutton_pos));
        inc(SkinPlusbutton_pos, 41);
        set(layer[SkinPlusbtn_out].x, get(SkinPlusbutton_pos));
        inc(SkinPlusbutton_pos, 41);
);
if (device.desktop || device.tablet || device.mobile,
    if (scene.count GT 1,
    inc(nnn, 2);
        set(layer[SkinPlusbtn_prev_pano].x, get(SkinPlusbutton_pos));
        inc(SkinPlusbutton_pos, 41);
        set(layer[SkinPlusbtn_next_pano].x, get(SkinPlusbutton_pos));
        inc(SkinPlusbutton_pos, 41);
      );
);

if (device.desktop || device.tablet || device.mobile,

      dec(SkinPlusbutton_pos, 5);
      set(SkinPlusbackgroundwidthwhenopened, get(SkinPlusbutton_pos));
      set(layer[SkinPlus_menu_bg].width, get(SkinPlusbackgroundwidthwhenopened));
	 
);
</action>




<events name="SkinPlusStartTourEvents" onTourStart="SkinPlusCallOnStartTour();" keep="true" />
<action name="SkinPlusCallOnStartTour">

		
		SkinPlusshowMenuControls();

</action>


<action name="SkinPlusbluron" type="Javascript" >
myname = 'blur(10px)'
$("canvas")
  .css('filter',myname),
  ('-webkitFilter',myname),
  ('-mozFilter',myname),
  ('-oFilter',myname),
  ('-msFilter',myname);
</action>

<action name="SkinPlusbluroff" type="Javascript" >
$( "canvas" ).css({"-webkit-filter": "blur(0px)","filter": "blur(0px)" });
</action>
<style name="button" type="text"
	       css="text-align:center;"
	       padding="4 8"
	       mergedalpha="false"
	       bgborder="4 0xFFFFFF 1"
	       bgroundedge="5"
	       bgshadow="0 1 4 0x000000 1.0"
	       onover="set(bgcolor, 0xC7E4FC);"
	       onout="calc(bgcolor, pressed ? 0x90CAF9 : 0xFFFFFF);"
	       ondown="set(bgcolor, 0x90CAF9);"
	       onup="calc(bgcolor, hovering ? 0xC7E4FC : 0xFFFFFF);"
	       />




<include url="%FIRSTXML%/graphics/include/skin_menu_84c.xml"/>


	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="f2f2f2" type="string" />
			<option name="background_lighter_color" value="ffffff" type="string" />
			<option name="background_darker_color" value="cacaca" type="string" />
			<option name="background_alpha" value="0" type="float" />
			<option name="text_color" value="f3f3f3" type="string" />

			<option name="text_font" value="Verdana" type="string" />
			<option name="text_size" value="12" type="int" />
			<option name="text_weight" value="normal" type="string" />
			<option name="text_decoration" value="normal" type="string" />
			<option name="text_bkg" value="000000" type="string" />
			<option name="text_bkg_alpha" value="1" type="float" />

			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="one" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="false" type="bool" />
			<option name="title_font" value="Verdana" type="string" />
			<option name="title_size" value="14" type="int" />
			<option name="title_weight" value="normal" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="000000" type="string" />
			<option name="display_orientation" value="false" type="bool" />
			<option name="display_radar" value="true" type="bool" />
			<option name="radar_radius" value="50" type="int" />
			<option name="radar_line_width" value="1" type="int" />
			<option name="radar_line_color" value="ffffff" type="string" />
			<option name="radar_line_alpha" value="0.50000762951094835" type="float" />
			<option name="radar_fill_color" value="aa3624" type="string" />
			<option name="radar_fill_alpha" value="0.80000000000000004" type="float" />
			<option name="selected_effect" value="pulsate" type="string" />
			<option name="close_on_click" value="false" type="bool" />
			<option name="position" value="bottomright" type="string" />
			<option name="zorder" value="3" type="int" />
			<option name="use_i18n" value="true" type="bool" />
		</settings>
		
		<floorplanItems selectedItem="" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
			
			
							<floorplanItem 
								name="fpitempanogroup99" 
								width="300" 
								height="309" 
								groupName="panogroup99" 
								url="floorplan/floor_plan_panogroup99.png" 
								title="panogroup99_floor_title"
								heading="31">
										<spot name="spotmap133" posX="0.34517765" posY="0.635468006" heading="0" desc="spotmap133_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano100" jsClick="spotmap133ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap134" posX="0.513536394" posY="0.548440039" heading="0" desc="spotmap134_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano107" jsClick="spotmap134ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap135" posX="0.252115071" posY="0.434318542" heading="94.399999999999466" desc="spotmap135_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano110" jsClick="spotmap135ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap136" posX="0.782571912" posY="0.423645318" heading="0" desc="spotmap136_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano108" jsClick="spotmap136ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap137" posX="0.676818967" posY="0.475369453" heading="0" desc="spotmap137_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano109" jsClick="spotmap137ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap138" posX="0.751269042" posY="0.294745475" heading="0" desc="spotmap138_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano106" jsClick="spotmap138ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap139" posX="0.375634521" posY="0.331691295" heading="0" desc="spotmap139_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano103" jsClick="spotmap139ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap140" posX="0.617597282" posY="0.316912979" heading="0" desc="spotmap140_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano101" jsClick="spotmap140ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap142" posX="0.532994926" posY="0.361247957" heading="0" desc="spotmap142_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano111" jsClick="spotmap142ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap143" posX="0.109137058" posY="0.490968794" heading="0" desc="spotmap143_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano104" jsClick="spotmap143ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap144" posX="0.6133672" posY="0.676518857" heading="0" desc="spotmap144_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano102" jsClick="spotmap144ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap146" posX="0.325719118" posY="0.368637115" heading="0" desc="spotmap146_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano112" jsClick="spotmap146ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
										<spot name="spotmap147" posX="0.389170885" posY="0.402298838" heading="0" desc="spotmap147_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano105" jsClick="spotmap147ActionSpotFloorPlan">
											<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="20" iconHeight="20" iconAnchor="center" />
										</spot>
							</floorplanItem>
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady_floorPlan">
		set(ptplugin[floorPlan].jsready, true);
		
		ifnot(ptplugin[floorPlan].floorplanItems.selectedSpot == "",
			set(ptplugin[floorPlan].floorplanItems.selectedSpotFov, get(view.hfov));
			js(invokePluginFunction(floorPlan, setKolorFloorPlanSelectedSpotOptions, get(xml.scene), get(view.hlookat), get(view.hfov)));
		);
	</action>
	
	
	
					
						<action name="spotmap133ActionSpotFloorPlan">
          mainloadscene(pano100);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap134ActionSpotFloorPlan">
          mainloadscene(pano107);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap135ActionSpotFloorPlan">
          mainloadscene(pano110);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap136ActionSpotFloorPlan">
          mainloadscene(pano108);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap137ActionSpotFloorPlan">
          mainloadscene(pano109);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap138ActionSpotFloorPlan">
          mainloadscene(pano106);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap139ActionSpotFloorPlan">
          mainloadscene(pano103);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap140ActionSpotFloorPlan">
          mainloadscene(pano101);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap142ActionSpotFloorPlan">
          mainloadscene(pano111);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap143ActionSpotFloorPlan">
          mainloadscene(pano104);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap144ActionSpotFloorPlan">
          mainloadscene(pano102);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap146ActionSpotFloorPlan">
          mainloadscene(pano112);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
						<action name="spotmap147ActionSpotFloorPlan">
          mainloadscene(pano105);

			tween(view.fov,     90, 3.0, easeInOutQuad );
			tween(view.fisheye, 0.0, 0.0, easeInOutQuad );
			set(display.flash10,on);

      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    

</action>
	
	
	<events name="floorPlanEvents" 
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,false););floorPlanActivateDefaultSpot();" 
	onviewchanged="floorPlanOnViewChange();" 
	onhidetourfloorplan="floorPlanCloseTourFloorPlan();" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart=""
	changetourlanguage="floorPlanChangeLanguage();"
	keep="true" />
	
	<action name="floorPlanChangeLanguage">
		if(ptplugin[floorPlan].jsready,
			stopdelayedcall(delay_floorPlan);
			js(invokePluginFunction(floorPlanArea, changeLanguage, false));
			js(invokePluginFunction(floorPlan, changeLanguage));
		,
			delayedcall(delay_floorPlan, 0.1, floorPlanChangeLanguage(););
		);
	</action>
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea_floorPlanArea(true);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		closeKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen === null,
			openKolorArea_floorPlanArea();
		,
			showKolorArea_floorPlanArea(true);
		);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		openKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanOnViewChange">
		if (floorPlanFloorPlanLoaded == true,
			ifnot(ptplugin[floorPlan].floorplanItems.selectedSpot == "",
				ifnot(scene[get(xml.scene)].planar,
					js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.hfov)));
				);
			);
		);
	</action>
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems.selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems.selectedItem, %2);
		
		if(%1 !== "",
			set(ptplugin[floorPlan].floorplanItems.selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems.selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems.selectedSpotFov, get(view.hfov));
		);
		
		
		if(ptplugin[floorPlanArea].isOpen,
			floorPlanSelectActivatedSpot(%1, %2, %3);
		);
	</action>
	
	<action name="floorPlanSelectActivatedSpot">
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));

		if(%1 !== "",
			if(scene[get(xml.scene)].planar,
				js(invokePluginFunction(floorPlan, hideRadar));
			,
				js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.hfov)));
			);
		);
	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems.selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearchActivated, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems.floorplanItem.count , inc(defaultfloorplaniteminc),
                        if(floorPlanSpotSearchActivated == true,
				
				if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
				,
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					);
				);
			);
			if(floorPlanSpotSearchActivated == true,
                                for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
                                        if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearchActivated, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems.selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems.selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems.selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems.selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="bottomright" type="string" />
		<option name="start_position" value="bottom" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="50" type="int" />
		<option name="display_title" value="false" type="bool" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="floorPlandisplay_close_text" type="string" />

		<option name="background_color" value="f2f2f2" type="string" />
		<option name="background_alpha" value="0" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="padding" value="15" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="area_width" value="320" type="int" />
		<option name="area_height" value="310" type="int" />
		<option name="area_width_unit" value="pixel" type="string" />
		<option name="area_height_unit" value="pixel" type="string" />
		<option name="animation" value="true" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="false" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea_floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_floorPlanArea')" type="string" />
		<option name="zorder" value="3" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady_floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);

	</action>
	
	<action name="openKolorArea_floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			set(ptplugin[floorPlanArea].isOpen, true);
			
			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea_floorplanDIV"&gt;&lt;/div&gt;));
			
			if(ptplugin[floorPlan].floorplanItems.selectedSpot != "",
				floorPlanSelectActivatedSpot(get(ptplugin[floorPlan].floorplanItems.selectedSpot), get(ptplugin[floorPlan].floorplanItems.selectedItem), get(ptplugin[floorPlan].floorplanItems.selectedSpotScene));
			);
			events.dispatch(onremovedisplayedobject);
		);
	</action>
	
	<action name="closeKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
		);
	</action>
	
	<action name="toggleKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea_floorPlanArea();
		,
			openKolorArea_floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback_floorPlanArea">
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();

	</action>
	
	<action name="changeTitleKolorArea_floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea_floorPlanArea">
		set(ptplugin[floorPlanArea].isOpen, true);
		
		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	</action>
		
	<action name="hideKolorArea_floorPlanArea">
		
		set(ptplugin[floorPlanArea].isOpen, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
	</action>
	
	<events name="kolorAreaEvents_floorPlanArea" 
		keep="true"
		hidetourcontrols="if(ptplugin[floorPlanArea].isOpen,set(restore_floorPlanArea, true);hideKolorArea_floorPlanArea(false);,set(restore_floorPlanArea, false););"
		showtourcontrols="if(tour_displayfloorplan,if(restore_floorPlanArea,showKolorArea_floorPlanArea(false);););"
	/>
	


<!-- DEBUG PLUGIN - PANORAMA LIST -->
<!-- There are 13 panoramas in the tour -->
<!-- PANORAMA - ID 
거실;pano100
주방;pano107
침실1;pano110
침실2;pano108
침실3;pano109
알파룸;pano106
드레스룸;pano103
공용욕실;pano101
부부욕실;pano105
현관;pano111
베란다;pano104
다용도실;pano102
화장대;pano112
-->

<!-- DEBUG PLUGIN - GROUP LIST -->
<!-- GROUP 

84C
-->




    <events name="callActionsOnTourEvents2events" keep="true" devices="desktop|tablet|mobile"


     />









<action name="setTourLanguage">
  if (%1 == null,
    showlog();
    trace("CHANGE TOUR LANGUAGE : NO LANGUAGE SET");
   ,
    set(tour_language, %1);
    js(eventTourChangeLanguage(get(tour_language)));
    events.dispatch(changetourlanguage);
  );
</action>

  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>



  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  
     <action name="playTourSounds">
    set(tour_soundson, true);
    events.dispatch(playtoursoundsevent);
    playbackgroundsound();
	resumeTourSoundsActions(true,true,true,true,true);
	  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);
    events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);
    events.dispatch(changetoursoundsevent);
    set3DLocalSoundsVolume();
  </action>
  
  <action name="playTourSoundsActions">
    if(%1,
        play3DLocalSounds();
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
        resume3DLocalSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
  </action>

  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

</krpano>